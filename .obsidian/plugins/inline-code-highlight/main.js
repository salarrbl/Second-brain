/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => InlineCodeHighlight
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var InlineCodeHighlight = class extends import_obsidian.Plugin {
  async onload() {
    this.registerMarkdownPostProcessor((element, context) => {
      const codeBlocks = element.querySelectorAll("code");
      for (const cb of codeBlocks) {
        if (cb.parentNode.tagName === "pre")
          continue;
        const text = cb.innerText;
        if (!text.startsWith("'"))
          continue;
        const match = text.match(/^'(\w+) (.*)$/);
        if (!match)
          continue;
        const [, lang, code] = match;
        cb.classList.add(`lang-${lang}`, "plugin-inline-code-highlight");
        cb.innerText = code;
        (0, import_obsidian.loadPrism)().then((Prism) => Prism.highlightElement(cb));
      }
    });
  }
};


/* nosourcemap */